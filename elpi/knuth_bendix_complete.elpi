kind eq type.
type (=>) tm -> tm -> eq.

kind tm type.
type a, b, c, d tm.
type o tm.
type (+) tm -> tm -> tm.
type (~) tm -> tm.

pred isvar i:tm.
isvar a.
isvar b.
isvar c.

pred iscnst i:tm.
iscnst o.

pred ax o:int, o:eq.
ax 1 (o + a => a).
ax 2 (~ a + a => o).
ax 3 (a + b + c => a + (b + c)).

pred copy o:tm, o:tm.
copy a a.
copy b b.
copy c c.
copy d d.
copy o o.
copy (A + B) (A1 + B1) :- copy A A1, copy B B1.
copy (~ A) (~ A1) :- copy A A1.

pred subst o:(tm -> tm), o:tm, o:tm.
subst M T S :- pi x\ copy x T => copy (M x) S.

pred mksubtm i:tm, o:tm, o:(tm -> tm).
mksubtm T S C :- subst C S T, not (var S), not (isvar S), not (iscnst S).

pred generalize i:tm, o:(tm -> tm -> tm -> tm).
generalize T F :-
            pi x\ copy a x => pi y\ copy b y => pi z\ copy c z => copy T (F x y z), !.

pred generalize2 i:(tm -> tm), o:(tm -> tm -> tm -> tm -> tm).
generalize2 T F :-
           pi u\ copy u u =>
            pi x\ copy a x => pi y\ copy b y => pi z\ copy c z => copy (T u) (F u x y z), !.

pred test.
test :-
     ax _ (L => R),
     print "L=" L,
     print "R=" R.

pred test1.
test1 :-
      ax 3 (L => _),
      mksubtm L S C,
      print "S=" S,
      print "C=" C.

pred test2.
test2 :-
      ax 3 (L1 => _),
      generalize L1 FL1,
      print "L1=" L1,
      print "FL1=" FL1.


pred unify i:tm, i:tm, o:tm, o:tm, o:tm, o:tm, o:tm, o:tm.
unify L' L X' Y' Z' X Y Z :-
      generalize L' F',
      generalize L F,
      F' X' Y' Z' = F X Y Z,
      print "L'=" (F' X' Y' Z'),
      print "L=" (F X Y Z),
      print "X'=" X',
      print "Y'=" Y',
      print "Z'=" Z',
      print "X=" X,
      print "Y=" Y,
      print "Z=" Z.

pred cpair i:eq, i:eq, o:eq.
cpair (L1 => R1) (L2 => R2) (Z_R1 => Z_CTX_R2) :-
   print "L1=" L1 ", R1=" R1,
   print "L2=" L2 ", R2=" R2,
/*
   L2' = a + b,
   C2' = (x\ x + c),
   L1 = C2' L2',
*/
   mksubtm L1 L2' C2',
   unify L2' L2 X' Y' Z' X Y Z,
   generalize R1 FR1,
   generalize R2 FR2,
   Z_R1 = FR1 X' Y' Z',           % R1

   generalize2 C2' FC2',
   Z_CTX_R2 = FC2' (FR2 X Y Z) X' Y' Z',
   print "σR1=" Z_R1,
   print "σCTX R2=" Z_CTX_R2.

pred getvar i:int, o:tm.
getvar 0 a.
getvar 1 b.
getvar 2 c.

pred intro i:eq.
intro (X => Y) :- intro2 X 0 N1, intro2 Y N1 _.

pred intro2 i:tm, i:int, o:int.
intro2 X N N1 :- print X N N1, fail.
intro2 X N N1 :- var X, getvar N X, N1 is N + 1.
intro2 a N N.
intro2 b N N.
intro2 c N N.
intro2 o N N.
intro2 (X + Y) N N2 :- intro2 X N N1, intro2 Y N1 N2.
intro2 (~ X) N N1 :- intro2 X N N1.

pred test55.
test55 :-
      intro (X + Y + X => Y),
      print (X + Y + X => Y).


pred red i:tm, i:eq, o:tm.
/* 外側優先とする。 */
red T1 (R => L) T2 :-
   generalize R FR,
   generalize L FL,
   T1 = FR X Y Z,
   T2 = FL X Y Z.
red (A + B) E (A1 + B1) :-
    (red A E A1; A = A1),
    (red B E B1; B = B1).
red (~ A) E (~ A1) :-
    (red A E A1; A = A1).

pred test66.
test66 :-
      ax 1 (R => L),
      red (o + b) (R => L) T,
      print "T=" T.

/*************************/
/* for TEST */

ax 4 (~ a + (a + b) => b).
ax 5 (~ ~ a + b => a + b).
ax 6 (a + o => a).
ax 7 (~ ~ a => a).
ax 8 (a + ~ a => o).
ax 9 (~ o => o).
ax 10 (a + (~ a + b) => b).
ax 11 (a + (b + ~ (a + b)) => o).
ax 12 (a + ~ (a + b) => ~ b).
ax 13 (~ (a + b) => ~ a + ~ b).

/*************************/


pred common i:int, i:int, o:eq.
common M N (C1 => C2) :-
   ax M (L1 => R1),
   ax N (L2 => R2),
   cpair (L1 => R1) (L2 => R2) (C1 => C2),
   intro (C1 => C2),
   print "C1 => C2 :" (C1 => C2).

pred test4.
test4 :-
   ax 3 (L1 => R1),          % L1 = (a + b) + c,     R1 = a + (b + c)
   ax 2 (L2 => R2),          % L2 = (~ a) + a,       R2 = o
   cpair (L1 => R1) (L2 => R2) (C1 => C2),
   intro (C1 => C2),
   ax 1 (R => L),
   red C2 (R => L) C2',
   print "C1 => C2 : " (C1 => C2').


pred test5.
test5 :- common 4 4 _.
/* ただし、2番目の解 */


pred test6.
test6 :- common 4 2 _.

/* END */


