/**

Constraint Handling Rules (CHR) の例

--------

2023_01_15 @suharahiromichi

*/

/**
# even と odd

X は、同時に even と odd ではあり得ない。


- Elpiプログラミング言語チュートリアル

https://gitlab.com/proofcafe/elpi/-/blob/main/tutorial_elpi_lang_jp.v


- Extensions to λProlog implemented in ELPI

https://github.com/LPCIC/elpi/blob/master/ELPI.md#syntactic-constraints

*/

type z nat.
type s nat -> nat.

pred even i:nat.
even z.
even (s X) :- odd X.
even X :-
     var X, declare_constraint (even X) [X].

pred odd i:nat.
odd (s X) :- even X.
odd X :-
    var X, declare_constraint (odd X) [X].

/**
以下の定義がないと、test はすべて成功してしまう。
*/
constraint even odd {
  % 同じ X に関する 2 つの異なる競合する制約が制約ストアの一部である場合。
  % 制約ストア：変数値に関する部分情報の格納場所
  rule (even X) (odd X) <=>
    (print X "can't be even and odd at the same time",
     fail).
}

pred test00.
pred test01.
pred test02.
test00 :-
      even (X), odd (X).        /* Failure */
test01 :-
      even (s X), odd (s X).    /* Failure */
test02 :-
      even (X), odd (s X).      /* Success */


/**
# 順序集合を表す二項関係の制約

## LEQ ``≦`` の制約

https://ja.wikipedia.org/wiki/Constraint_Handling_Rules
*/

pred leq i:int, i:int.
leq (uvar as A) (uvar as B) :- !,
    declare_constraint (leq A B) [A,B].
leq A           (uvar as B) :- !,
    declare_constraint (leq A B) [B].
leq (uvar as A) B         :- !,
    declare_constraint (leq A B) [A].

/**
制約は重複できないため、Wikipediaにある test11 の成立する(LEQの例)だけなら、以下でよい。
*/
/*
constraint leq {
  rule \ (leq X X).                       % refl 反射律
  rule (leq X Y) \ (leq Y X) <=> (Y = X). % atisym 半対称律
  rule (leq X Y) (leq Y Z) <=> (leq X Z). % trans 推移性
  rule (leq X Y) \ (leq X Y) <=> true.    % idempotence 等冪性
}
*/

pred test11.
test11 :-
      leq X Y, leq Y Z, leq Z X.        /* Success */

/**
## LTN ``<`` を追加する。

elpi/tests/sources/chrLEQ.elpi
*/

pred ltn i:int, i:int.
ltn (uvar as A) (uvar as B) :- !,
    declare_constraint (ltn A B) [A,B].
ltn A           (uvar as B) :- !,
    declare_constraint (ltn A B) [B].
ltn (uvar as A) B         :- !,
    declare_constraint (ltn A B) [A].

constraint leq ltn {
  rule (leq X Y) (ltn Y X) <=> false.           % incompat (FIRST!!)
  rule (ltn X Y) (ltn Y X) <=> false.
  rule (ltn X X) <=> false.
  rule \ (leq X X).                             % refl
  rule (leq X Y) \ (leq Y X) <=> (Y = X).       % atisym
  rule (leq X Y) (leq Y Z) <=> (leq X Z).       % trans
  rule (leq X Y) (ltn Y Z) <=> (ltn X Z).
  rule (ltn X Y) (leq Y Z) <=> (ltn X Z).
  rule (ltn X Y) (ltn Y Z) <=> (ltn X Z).
  rule (leq X Y) \ (leq X Y).                   % idempotence
  rule (ltn X Y) \ (ltn X Y).
}

pred test12.
test12 :-
     leq A B, leq B C, not (ltn C A), ltn A B, not(A = C).              /* Success */

/**
constraint-test.elpi をマージすること。
*/

/* END */
