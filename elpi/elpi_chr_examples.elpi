/**

Constraint Handling Rules (CHR) の例

--------

2023_01_15 @suharahiromichi

*/

/**
1. 文法

```
CONSTRAINT ::= constraint CLIQUE { RULE* }
CLIQUE ::= NAME+
RULE ::= rule TO-MATCH TO-REMOVE GUARD TO-ADD .
TO-MATCH  ::= SEQUENT*
TO-REMOVE ::= \   SEQUENT+
TO-ADD    ::= <=> SEQUENT
GUARD     ::= |   TERM
SEQUENT ::= TERM | ( VARIABLE : COMPOUND-TERM ?- COMPOUND-TERM )
TERM ::= VARIABLE | NAME | ( COMPOUND-TERM )
NAME ::= foo | bar ...
VARIABLE ::= Foo | Bar ...
COMPOUND-TERM ::= ...
```

2. Operational Semantics
2. 操作的意味論

As soon as a new constraint C is declared:
新しい制約 C が宣言されるとすぐに、以下が実行される:

Each rule (for the clique to which C belongs) is considered, in the
order of declaration. Let's call it R.
各ルール（C が属するルールの塊）は、宣言順に考慮されます。 これをRと呼びます。

All constraints suspended on a list of variables with a non-empty
intersection with the one on which C is suspended are considered (in
no specified order). Let's call them CS
C が中断されているものとの空でない交差を持つ変数のリストで中断されてい
るすべての制約が考慮されます (指定された順序ではありません)。 CSと呼び
ます。

if R has n patterns, then all permutations of n-1 elements of CS and C
are generated. I.e. C is put in any possible position in a list of
other constraints taken from CS, let's call one of such lists S.
Rにn個のパターンがある場合、CSとCのn-1要素のすべての順列が生成されます。
つまり C は、CS から取得したその他の制約のリスト内の可能な位置に配置さ
れます。そのようなリストの 1 つを S と呼びましょう。

The constraints in S are frozen, i.e. all flexible terms (X a1..an)
are replaced by (uvar cx [b1,..,bn]) where cx is a new constant for X
and bi is the frozen term for ai. We now have SF.
S の制約は固定されています。つまり、すべての柔軟な項 (X a1..an) は
(uvar cx [b1,..,bn]) に置き換えられます。ここで、cx は X の新しい定数
であり、bi は ai の固定された項です。 これで SF ができました。

Each sequent in SF is matched against the corresponding pattern in
R. If matching fails, the rule is aborted and the next one is
considered.
SF の各シークエントは、R の対応するパターンと照合されます。照合に失敗
した場合、ルールは中止され、次のルールが考慮されます。

All terms are spread in different name contexts, and now live in the
disjoint union of all name contexts.
すべての項はさまざまな名前の文脈に広がっており、現在ではすべての名前の
文脈のdisjoint union (非交和 重なりのない和の) 中に存在しています。

The guard is run. If it fails the rule is aborted and the next one is
considered. It if succeeds all subsequent rules are aborted (committed
choice).
ガードが実行されます。 失敗した場合、ルールは中止され、次のルールが考
慮されます。 成功すると、後続のすべてのルールが中止されます (コミット
チョイス)。

The new goal is resumed immediately (before any other active goal). If
the name context for the new goal is given, then the new goal is
checked to live in such context before resuming. If the name context
is not specified the resumed goals lives in the disjoint union of all
name contexts.
新しい目標はすぐに再開されます (他のアクティブな目標の前に)。 新しいゴー
ルのコンテキスト名が指定されている場合、再開する前に新しいゴールがその
ようなコンテキストに存在するかどうかがチェックされます。 名前コンテキ
ストが指定されていない場合、再開されたゴールは、すべての名前コンテキス
トの互いに素な和集合の中に存在します。

*/


/**
# even と odd

X は、同時に even と odd ではあり得ない。


- Elpiプログラミング言語チュートリアル

https://gitlab.com/proofcafe/elpi/-/blob/main/tutorial_elpi_lang_jp.v


- Extensions to λProlog implemented in ELPI

https://github.com/LPCIC/elpi/blob/master/ELPI.md#syntactic-constraints

*/

type z nat.
type s nat -> nat.

pred even i:nat.
even z.
even (s X) :- odd X.
even X :-
     var X, declare_constraint (even X) [X].

pred odd i:nat.
odd (s X) :- even X.
odd X :-
    var X, declare_constraint (odd X) [X].

/**
以下の定義がないと、test はすべて成功してしまう。
*/
constraint even odd {
  % 同じ X に関する 2 つの異なる競合する制約が制約ストアの一部である場合。
  % 制約ストア：変数値に関する部分情報の格納場所
  rule (even X) (odd X) <=>
    (print X "can't be even and odd at the same time",
     fail).
}

pred test00.
pred test01.
pred test02.
test00 :-
      even (X), odd (X).        /* Failure */
test01 :-
      even (s X), odd (s X).    /* Failure */
test02 :-
      even (X), odd (s X).      /* Success */


/**
# 順序集合を表す二項関係の制約

## LEQ ``≦`` の制約

https://ja.wikipedia.org/wiki/Constraint_Handling_Rules
*/

pred leq i:int, i:int.
leq (uvar as A) (uvar as B) :- !,
    declare_constraint (leq A B) [A,B].
leq A           (uvar as B) :- !,
    declare_constraint (leq A B) [B].
leq (uvar as A) B         :- !,
    declare_constraint (leq A B) [A].

/**
制約は重複できないため、Wikipediaにある test11 の成立する(LEQの例)だけなら、以下でよい。
*/
/*
constraint leq {
  rule \ (leq X X).                       % refl 反射律
  rule (leq X Y) \ (leq Y X) <=> (Y = X). % atisym 半対称律
  rule (leq X Y) (leq Y Z) <=> (leq X Z). % trans 推移性
  rule (leq X Y) \ (leq X Y) <=> true.    % idempotence 等冪性
}
*/

pred test11.
test11 :-
      leq X Y, leq Y Z, leq Z X.        /* Success */

/**
## LTN ``<`` を追加する。

elpi/tests/sources/chrLEQ.elpi
*/

pred ltn i:int, i:int.
ltn (uvar as A) (uvar as B) :- !,               % uvar as A は、(var A) の意味
    declare_constraint (ltn A B) [A,B].
ltn A           (uvar as B) :- !,
    declare_constraint (ltn A B) [B].
ltn (uvar as A) B         :- !,
    declare_constraint (ltn A B) [A].

constraint leq ltn {
  rule (leq X Y) (ltn Y X) <=> false.           % incompat (FIRST!!)
  rule (ltn X Y) (ltn Y X) <=> false.
  rule (ltn X X) <=> false.
  rule \ (leq X X).                             % refl
  rule (leq X Y) \ (leq Y X) <=> (Y = X).       % atisym
  rule (leq X Y) (leq Y Z) <=> (leq X Z).       % trans
  rule (leq X Y) (ltn Y Z) <=> (ltn X Z).
  rule (ltn X Y) (leq Y Z) <=> (ltn X Z).
  rule (ltn X Y) (ltn Y Z) <=> (ltn X Z).
  rule (leq X Y) \ (leq X Y).                   % idempotence
  rule (ltn X Y) \ (ltn X Y).
}

pred test12.
test12 :-
     leq A B, leq B C, not (ltn C A), ltn A B, not(A = C).              /* Success */


/**
# 最大公約数

## 最大公約数（その1）

https://github.com/LPCIC/elpi/blob/master/tests/sources/chrGCD.elpi

99と66の最大公約数が11であるので、
``gcd' 99 X, gcd' 66 X, X = p11`` が成り立つ。
*/

kind prime type.
type p11 prime.
type p7 prime.
pred gcd' i:int, i:prime.

gcd' A (uvar as B) :- !,
    declare_constraint (gcd' A B) [B].
%% ここは素数でないといけない。
gcd' 11 p11 :- print "prime 11 solved".
gcd' 7 p7 :- print "prime 7 solved".

constraint gcd' {
  rule (gcd' A _) \ (gcd' B _) | (A = B).     % rule1
  rule (gcd' A _) \ (gcd' B X) | (A < B) <=> (C is (B - A), gcd' C X). % rule2
}

pred test21.
pred test22.
pred test20.
test21 :-                               /* 99と77のGCDは11である。 */
       gcd' 99 X, gcd' 77 X, X = p11.
test22 :-                               /* 14と77のGCDは7である。 */
       gcd' 14 Y, gcd' 77 Y, Y = p7.
test20 :-
       gcd' 99 X, gcd' 66 X, gcd' 14 Y, gcd' 22 X, gcd' 77 Y,
       % we then force a resumption to check only GCDs are there
       X = p11, Y = p7.

/**

```
gcd A Y, gcd B X, A = B
------------------------ rule1
true
```

```
gcd A Y, gcd B X, A < B
------------------------ rule2
gcd A Y, gcd (B - A) X
```

```
gcd 14 Y, gcd 77 Y
------------------- rule2
gcd 14 Y, gcd 63 Y
------------------- rule2
gcd 14 Y, gcd 7  Y
------------------- gcd 7 Y
gcd 14 Y, gcd 7 p7
------------------- rule2
gcd 7  Y, gcd 7 p7
------------------- gcd 7 Y
gcd 7 p7, gcd 7 p7
------------------- rule1
true
```

*/

/**
## 最大公約数（その2、ユーグリッドの互除法)

## 素数

## フィボナッチ数

https://ja.wikipedia.org/wiki/Constraint_Handling_Rules

*/


/**
# 有限ドメイン (N.G.)

https://www.swi-prolog.org/pldoc/man?section=chr-examples
*/

pred intersection o:list X, o:list X, o:list X.
intersection [] L L.
intersection [X|L1] L2 L3 :-
             std.mem L2 X, !,
             intersection L1 L2 L3.
intersection [X|L1] L2 [X|L3] :-
             intersection L1 L2 L3.

pred dom i:X, o:list X.
dom X L :-
    print "don= " X L,
    var X, !,
    declare_constraint (dom X L) [X].

constraint dom {
  rule (dom X [])            <=> fail.
  rule (dom X [Y])           <=> (X = Y).
  rule (dom X L) | (nonvar X, std.mem L X) <=> true.
  rule (dom X L1) (dom X L2) | (intersection L1 L2 L3) <=> (dom X L3).
}

pred test4.
test4 :-                                /* Success */
      dom A [1,2,3], dom A [3,4,5],     /* A = 3 */
      print "A = " A.


/**
# Example of high order rules (作成中)

https://github.com/LPCIC/elpi/blob/master/ELPI.md#example-of-higher-order-rules
*/

mode (term i o).
term (app HD ARG) TGT :- term HD (arrow SRC TGT), term ARG SRC.
term (lam F) (arrow SRC TGT) :- pi x\ term x SRC => term (F x) TGT.
term (uvar as X) T :- declare_constraint (term X T) [X].

constraint term {
  rule (GX ?- term (uvar K LX) TX)
     \ (GY ?- term (uvar K LY) TY)
     | (compatible GX LX GY LY CTXEQS)
   <=> [TX = TY | CTXEQS].
}

compatible _ [] _ [] [] :- !.
compatible GX [X|XS] GY [Y|YS] [TX = TY | K] :-
 (GX => term X TX),
 (GY => term Y TY),
 !,
 compatible GX XS GY YS K.
compatible _ _ _ _ [].

main10 :-
  (term (lam x\ lam y\ app (app (F x y) x) y) T1),
  (term (lam y\ lam x\ app (app (F x y) y) x) T2).


/* END */
