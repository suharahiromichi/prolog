%% 
%% 述語の i/o の指定はほぼ意味がない。iを指定すると正しく解が求められない。
%% 
%% (*) reverse X [1,2]. が2解目を求めにいって、無限再帰に入るのを回避する。
%% この処置は i/o では不可能だろう。
%%
%% reverse X Y に対して、X = [], Y = [] を返すが正しい動作といえるだろう。
%% 


%% 
%% sample A
%% 
%% qiita 用
%% 
pred    reverse  o:list A, o:list A.

reverse L K :-
        pi rv \ (
                   (rv nil K :- !),
                   (pi x \ pi n \ pi m \
                       (rv (x :: n) m :- rv n (x :: m)))
                ) => rv L nil.

%% 
%% sample B
%% 
%type reverse1  list A -> list A -> o.
pred reverse1   o:list A, o:list A.

reverse1 L K :-
        pi rev \ (
                    (pi l \
                        rev nil l l :- !),  % (*)
                    (pi x \ pi l \ pi k \ pi m \
                        (rev (cons x l) k m :- rev l k (cons x m)))
                 ) => rev L K nil.

%% 
%% sample C
%% 
%type reverse2 list A -> list A -> o.
pred reverse2  o:list A, o:list A.

reverse2 L K :-
        pi rv \ (
                   (rv nil K :- !),         % (*)
                   (pi x \ pi n \ pi m \
                       (rv (x :: n) m :- rv n (x :: m)))
                ) => rv L nil.

%%
%% sample D
%% 
%% SWI-Prolog の実装
%% 些細な振る舞いも同じになっている。
%%

pred reverse3  o:list A, o:list A.
pred rev3      o:list A, o:list A, o:list A, o:list A.

reverse3 A B :- rev3 A [] B B.
rev3 [] A A [] :- !, print [] A A [].
rev3 [B | A] C D [E | F] :- print B A C D E F, rev3 A [B | C] D F, print A B C D E F.

pred reverse4  o:list A, o:list A.
reverse4 L K :-
        pi rv \ (
                   (rv [] A A []),
                   (pi a b c d e\
                    (rv [b | a] c d [_ | e] :- rv a [b | c] d e))
                ) => rv L [] K K.

/*
goal> reverse3 [1,2,3,4,5,6] X.

Typechecking time: 0.121
1 [2, 3, 4, 5, 6] [] [X0 | X1] X0 X1
2 [3, 4, 5, 6] [1] [X0, X2 | X3] X2 X3
3 [4, 5, 6] [2, 1] [X0, X2, X4 | X5] X4 X5
4 [5, 6] [3, 2, 1] [X0, X2, X4, X6 | X7] X6 X7
5 [6] [4, 3, 2, 1] [X0, X2, X4, X6, X8 | X9] X8 X9
6 [] [5, 4, 3, 2, 1] [X0, X2, X4, X6, X8, X10 | X11] X10 X11
[] [6, 5, 4, 3, 2, 1] [6, 5, 4, 3, 2, 1] []
[] 6 [5, 4, 3, 2, 1] [6, 5, 4, 3, 2, 1] 1 []
[6] 5 [4, 3, 2, 1] [6, 5, 4, 3, 2, 1] 2 [1]
[5, 6] 4 [3, 2, 1] [6, 5, 4, 3, 2, 1] 3 [2, 1]
[4, 5, 6] 3 [2, 1] [6, 5, 4, 3, 2, 1] 4 [3, 2, 1]
[3, 4, 5, 6] 2 [1] [6, 5, 4, 3, 2, 1] 5 [4, 3, 2, 1]
[2, 3, 4, 5, 6] 1 [] [6, 5, 4, 3, 2, 1] 6 [5, 4, 3, 2, 1]

Success:  X = [6, 5, 4, 3, 2, 1]

オルタネートは残らない。
*/

/*
goal> reverse3 X [1,2,3,4,5,6].

Typechecking time: 0.125
X0 X1 [] [1, 2, 3, 4, 5, 6] [2, 3, 4, 5, 6]
X2 X3 [X0] [1, 2, 3, 4, 5, 6] [3, 4, 5, 6]
X4 X5 [X2, X0] [1, 2, 3, 4, 5, 6] [4, 5, 6]
X6 X7 [X4, X2, X0] [1, 2, 3, 4, 5, 6] [5, 6]
X8 X9 [X6, X4, X2, X0] [1, 2, 3, 4, 5, 6] [6]
X10 X11 [X8, X6, X4, X2, X0] [1, 2, 3, 4, 5, 6] []
[] [1, 2, 3, 4, 5, 6] [1, 2, 3, 4, 5, 6] []
[] 1 [2, 3, 4, 5, 6] [1, 2, 3, 4, 5, 6] []
[1] 2 [3, 4, 5, 6] [1, 2, 3, 4, 5, 6] [6]
[2, 1] 3 [4, 5, 6] [1, 2, 3, 4, 5, 6] [5, 6]
[3, 2, 1] 4 [5, 6] [1, 2, 3, 4, 5, 6] [4, 5, 6]
[4, 3, 2, 1] 5 [6] [1, 2, 3, 4, 5, 6] [3, 4, 5, 6]
[5, 4, 3, 2, 1] 6 [] [1, 2, 3, 4, 5, 6] [2, 3, 4, 5, 6]

Success:  X = [6, 5, 4, 3, 2, 1]

オルタネートは残り、後戻りするとFailする。

rev3 [] A A [] :- !.

とすると、オルタネートは残らない。
*/

%% END
